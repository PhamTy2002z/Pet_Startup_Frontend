import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import {
  getPetById,
  updatePetById,
  uploadPetAvatar,
  getPetAvatarUrl
} from '../api/petService';
import { FiPlus, FiTrash2, FiEdit2 } from 'react-icons/fi';
import './UserEditForm.css';

// Import react-toastify
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css'; // Import style cho Toastify

// Nh√£n cho hai ng√¥n ng·ªØ
const labels = {
  vi: {
    edit: 'Ch·ªânh s·ª≠a',
    closeEdit: 'ƒê√≥ng ch·ªânh s·ª≠a',
    petPhoto: '·∫¢nh Pet',
    petInfoTitle: 'Th√¥ng tin C·ªßa B√©',
    petName: 'T√™n Pet',
    species: 'Lo√†i',
    birthDate: 'Ng√†y Sinh',
    ownerInfoTitle: 'Th√¥ng tin C·ªßa Sen',
    ownerName: 'T√™n Ch·ªß',
    ownerPhone: 'S·ªë ƒëi·ªán tho·∫°i',
    vaxTitle: 'L·ªãch ti√™m ng·ª´a',
    noVax: 'Ch∆∞a c√≥ m≈©i ti√™m n√†o.',
    addVax: 'Th√™m m≈©i ti√™m',
    save: 'L∆∞u th√¥ng tin',
    toggleLang: 'EN',
    success: 'Thao t√°c th√†nh c√¥ng!',
    error: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!',
    updatedField: 'Tr∆∞·ªùng {field} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t'
  },
  en: {
    edit: 'Edit',
    closeEdit: 'Close Edit',
    petPhoto: 'Pet Photo',
    petInfoTitle: "Pet's Information",
    petName: 'Name',
    species: 'Species',
    birthDate: 'Birth Date',
    ownerInfoTitle: "Owner's Information",
    ownerName: 'Owner Name',
    ownerPhone: 'Owner Phone',
    vaxTitle: 'Vaccination History',
    noVax: 'No vaccinations yet.',
    addVax: 'Add Vaccination',
    save: 'Save',
    toggleLang: 'VI',
    success: 'Action was successful!',
    error: 'Something went wrong, please try again!',
    updatedField: 'The {field} field has been updated'
  }
};

export default function UserEditForm() {
  const { id } = useParams();
  const [lang, setLang] = useState('vi');
  const t = labels[lang];

  const [isEditMode, setIsEditMode] = useState(false);
  const [form, setForm] = useState({
    info: { name: '', species: '', birthDate: '' },
    owner: { name: '', phone: '' },
    vaccinations: []
  });
  const [avatarFile, setAvatarFile] = useState(null);
  const [avatarUrl, setAvatarUrl] = useState('');
  const [preview, setPreview] = useState('');

  // Load pet data
  useEffect(() => {
    getPetById(id).then(pet => {
      setForm({
        info: {
          name: pet.info.name || '',
          species: pet.info.species || '',
          birthDate: pet.info.birthDate
            ? new Date(pet.info.birthDate).toISOString().split('T')[0]
            : ''
        },
        owner: {
          name: pet.owner.name || '',
          phone: pet.owner.phone || ''
        },
        vaccinations: (pet.vaccinations || []).map(v => ({
          name: v.name,
          date: v.date
            ? new Date(v.date).toISOString().split('T')[0]
            : ''
        }))
      });
      if (pet.avatarFileId) {
        setAvatarUrl(getPetAvatarUrl(pet.avatarFileId));
      }
    });
  }, [id]);

  // Preview file uploads
  useEffect(() => {
    if (!avatarFile) {
      setPreview('');
      return;
    }
    const url = URL.createObjectURL(avatarFile);
    setPreview(url);
    return () => URL.revokeObjectURL(url);
  }, [avatarFile]);

  // Handlers
  const handleChange = (e, section) => {
    const { name, value } = e.target;
    setForm(f => ({
      ...f,
      [section]: { ...f[section], [name]: value }
    }));
  };

  const handleVaxChange = (idx, field, value) => {
    setForm(f => {
      const vax = [...f.vaccinations];
      vax[idx] = { ...vax[idx], [field]: value };
      return { ...f, vaccinations: vax };
    });
  };

  const addVax = () => {
    setForm(f => ({
      ...f,
      vaccinations: [...f.vaccinations, { name: '', date: '' }]
    }));
  };

  const removeVax = idx => {
    setForm(f => ({
      ...f,
      vaccinations: f.vaccinations.filter((_, i) => i !== idx)
    }));
  };

  const handleFileChange = e => {
    setAvatarFile(e.target.files[0] || null);
  };

  // Thay ƒë·ªïi trong h√†m handleSubmit
const handleSubmit = async e => {
  e.preventDefault();
  try {
    // Chu·∫©n h√≥a payload
    const payload = {
      info: { ...form.info, birthDate: form.info.birthDate || null },
      owner: { ...form.owner },
      vaccinations: form.vaccinations
        .filter(v => v.name && v.date)
        .map(v => ({ name: v.name, date: v.date }))
    };

    // C·∫≠p nh·∫≠t text fields
    const updatedFields = [];

    // Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë√£ thay ƒë·ªïi
    if (form.info.name !== '') updatedFields.push(t.petName);
    if (form.info.species !== '') updatedFields.push(t.species);
    if (form.owner.name !== '') updatedFields.push(t.ownerName);
    if (form.owner.phone !== '') updatedFields.push(t.ownerPhone);

    await updatePetById(id, payload);

    // Upload avatar n·∫øu c√≥
    if (avatarFile) {
      const updated = await uploadPetAvatar(id, avatarFile);
      setAvatarUrl(getPetAvatarUrl(updated.avatarFileId));
      setAvatarFile(null);
    }

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng cho c√°c tr∆∞·ªùng ƒë√£ thay ƒë·ªïi
    updatedFields.forEach(field => {
      toast.success(`${field} ${t.success}`);
    });

    // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng chung
    toast.success(t.success);

    setIsEditMode(false);
    setPreview('');
  } catch (err) {
    console.error(err);
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
    toast.error(t.error);
  }
};

  return (
    <form className="form-container" onSubmit={handleSubmit}>
      <div className="edit-controls">
        <button
          type="button"
          className={`edit-btn ${isEditMode ? 'active' : ''}`}
          onClick={() => setIsEditMode(m => !m)}
        >
          <FiEdit2 /> {isEditMode ? t.closeEdit : t.edit}
        </button>
        <button
          type="button"
          className="lang-btn"
          onClick={() => setLang(l => (l === 'vi' ? 'en' : 'vi'))}
        >
          {t.toggleLang}
        </button>
      </div>

      {/* Avatar Section */}
      <div className="section avatar-section">
        <h3 className="section-title">üì∑ {t.petPhoto}</h3>
        {/* Hi·ªÉn th·ªã ·∫£nh n·∫øu c√≥ */}
        {avatarUrl ? (
          <img src={avatarUrl} alt="Pet Avatar" className="pet-image-preview" />
        ) : (
          // N·∫øu kh√¥ng c√≥ avatar, hi·ªÉn th·ªã khung tr·ªëng
          <div className="pet-image-preview empty-avatar" />
        )}

        <input
          type="file"
          accept="image/*"
          className="file-input"
          onChange={handleFileChange}
          disabled={!isEditMode} // Ch·ªâ cho ph√©p upload khi ·ªü ch·∫ø ƒë·ªô ch·ªânh s·ª≠a
        />
      </div>

      <div className="fields-column">
        {/* Pet Info */}
        <div className="section">
          <h3 className="section-title">üêæ {t.petInfoTitle}</h3>
          <div className="field-group">
            <label htmlFor="name">{t.petName}</label>
            <input
              id="name"
              name="name"
              value={form.info.name}
              onChange={e => handleChange(e, 'info')}
              disabled={!isEditMode}
            />
          </div>
          <div className="field-group">
            <label htmlFor="species">{t.species}</label>
            <input
              id="species"
              name="species"
              value={form.info.species}
              onChange={e => handleChange(e, 'info')}
              disabled={!isEditMode}
            />
          </div>
          <div className="field-group">
            <label htmlFor="birthDate">{t.birthDate}</label>
            <input
              id="birthDate"
              type="date"
              name="birthDate"
              value={form.info.birthDate}
              onChange={e => handleChange(e, 'info')}
              disabled={!isEditMode}
            />
          </div>
        </div>

        {/* Owner Info */}
        <div className="section">
          <h3 className="section-title">üë§ {t.ownerInfoTitle}</h3>
          <div className="field-group">
            <label htmlFor="owner-name">{t.ownerName}</label>
            <input
              id="owner-name"
              name="name"
              value={form.owner.name}
              onChange={e => handleChange(e, 'owner')}
              disabled={!isEditMode}
            />
          </div>
          <div className="field-group">
            <label htmlFor="owner-phone">{t.ownerPhone}</label>
            <input
              id="owner-phone"
              name="phone"
              value={form.owner.phone}
              onChange={e => handleChange(e, 'owner')}
              disabled={!isEditMode}
              maxLength="10" // Gi·ªõi h·∫°n t·ªëi ƒëa l√† 10 k√Ω t·ª±
              onInput={e => {
                // ƒê·∫£m b·∫£o ch·ªâ c√≥ 10 ch·ªØ s·ªë
                e.target.value = e.target.value.replace(/\D/g, '').slice(0, 10); // Lo·∫°i b·ªè ch·ªØ v√† gi·ªØ 10 s·ªë
              }}
              placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i (10 ch·ªØ s·ªë)"
              type="tel" // Ch·ªâ ƒë·ªãnh l√† nh·∫≠p s·ªë ƒëi·ªán tho·∫°i
              pattern="[0-9]{10}" // Ch·ªâ cho ph√©p 10 ch·ªØ s·ªë
              title="S·ªë ƒëi·ªán tho·∫°i ph·∫£i c√≥ 10 ch·ªØ s·ªë"
            />
          </div>
        </div>

        {/* Vaccinations */}
        <div className="section">
          <h3 className="section-title">üíâ {t.vaxTitle}</h3>
          {form.vaccinations.length === 0 && <p>{t.noVax}</p>}
          {form.vaccinations.map((v, i) => (
            <div key={i} className="vax-item">
              <input
                type="text"
                placeholder={t.addVax}
                value={v.name}
                onChange={e => handleVaxChange(i, 'name', e.target.value)}
                disabled={!isEditMode}
              />
              <input
                type="date"
                value={v.date}
                onChange={e => handleVaxChange(i, 'date', e.target.value)}
                disabled={!isEditMode}
              />
              {isEditMode && (
                <button
                  type="button"
                  className="remove-vax-btn"
                  onClick={() => removeVax(i)}
                >
                  <FiTrash2 />
                </button>
              )}
            </div>
          ))}
          {isEditMode && (
            <button type="button" className="add-vax-btn" onClick={addVax}>
              <FiPlus /> {t.addVax}
            </button>
          )}
        </div>

        {/* Submit */}
        {isEditMode && (
          <button type="submit" className="submit-btn">
            {t.save}
          </button>
        )}
      </div>

      {/* Toast container ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o */}
      <ToastContainer />
    </form>
  );
}
